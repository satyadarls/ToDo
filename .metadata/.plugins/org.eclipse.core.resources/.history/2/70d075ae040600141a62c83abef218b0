package com.littleturn.todo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import com.littleturn.todo.ReminderAlarm;
import android.os.Bundle;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.Toast;

public class Tasks extends Activity {
	ListView l1;
	int mYear;
    int mMonth;
    int mDay;
    int mHour;
    int mMinute;
    Calendar c;
    Context mContext;
    List<RowItem> rowItems;
    RowItem itemData;
    CustomAdapter adapter;
    SQLiteDatabase db;
    Cursor cu;
    String[] Category={"DAILY","WEEKLY","MONTHLY","YEARLY","BIRTHDAYS","ANIVERSARIES"};
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tasks);
        mContext=this;
        c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);
        mHour = c.get(Calendar.HOUR_OF_DAY);
        mMinute = c.get(Calendar.MINUTE);
        
        rowItems = new ArrayList<RowItem>();
        l1=(ListView)findViewById(R.id.list);
        adapter = new CustomAdapter(this, rowItems);
        l1.setAdapter(adapter);
        
        
        //========================================
        db  = openOrCreateDatabase("tasks", MODE_WORLD_WRITEABLE,null);
        db.execSQL("create table if not exists tasksdetails(name VARCHAR,hours VARCHAR,minutes VARCHAR,priority VARCHAR,category VARCHAR)");
        db.execSQL("drop table tasksdetails");
        /*cu= db.rawQuery("select * from tasksdetails", null); // null is for mode.
        
        while(cu.moveToNext()){
        	RowItem item = new RowItem(R.drawable.ic_launcher,""+cu.getString(0),""+cu.getString(1)+":"+cu.getString(2),""+cu.getString(3),""+cu.getString(4));
        	rowItems.add(item);
        	adapter.notifyDataSetChanged();
        }*/
        //==========================================
        l1.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
					int position, long arg3) {
				// TODO Auto-generated method stub
				removeItemFromList(position);
				return false;
			}

			private void removeItemFromList(int position) {
				// TODO Auto-generated method stub
				final int deletePosition = position;
				 AlertDialog.Builder alert = new AlertDialog.Builder(Tasks.this);
				 	alert.setIcon(R.drawable.delete);
		            alert.setTitle("DELETE TASK");
		            alert.setMessage("Are you sure you want delete this Task?");
		            alert.setPositiveButton("YES", new DialogInterface.OnClickListener() {
		                public void onClick(DialogInterface dialog, int which) {
		                    // TOD O Auto-generated method stub
		                	
		                	Intent intentstop = new Intent(mContext, ReminderAlarm.class);
		                	PendingIntent senderstop = PendingIntent.getBroadcast(mContext,deletePosition+1, intentstop, 0);
		                	AlarmManager alarmManagerstop = (AlarmManager) getSystemService(ALARM_SERVICE);
		                	alarmManagerstop.cancel(senderstop);
		                	
		               //============deleting from database============ 
		                	itemData = rowItems.get(deletePosition);
		               
		                	db  = openOrCreateDatabase("tasks", MODE_WORLD_WRITEABLE,null);
		                	db.delete("tasksdetails", "name='"+itemData.getTitle()+"'",null);
		                	Toast.makeText(getApplicationContext(),"Task "+itemData.getTitle()+" deleted", Toast.LENGTH_SHORT).show();
		             //=====================================================================   	
		                        // main code on after clicking yes
		        
		                        rowItems.remove(deletePosition);
		                        adapter.notifyDataSetChanged();
		                        adapter.notifyDataSetInvalidated();
		          
		                }
		            });
		            alert.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
		                public void onClick(DialogInterface dialog, int which) {
		                    // TODO Auto-generated method stub
		                    dialog.dismiss();
		                }
		            });
		          
		            alert.show();
				
			}
		});
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
    	// TODO Auto-generated method stub
    	
    	switch (item.getItemId()) {
		case R.id.contactsicon:
			Intent i=new Intent(mContext,Add.class);
			startActivity(i);
			break;

		default:
			break;
		}
    	
    	return super.onOptionsItemSelected(item);
    }
     
    
}
